// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/mongo/ledger_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/imranzahoor/banking-ledger/internal/model"
)

// MockLedgerRepository is a mock of LedgerRepository interface.
type MockLedgerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerRepositoryMockRecorder
}

// MockLedgerRepositoryMockRecorder is the mock recorder for MockLedgerRepository.
type MockLedgerRepositoryMockRecorder struct {
	mock *MockLedgerRepository
}

// NewMockLedgerRepository creates a new mock instance.
func NewMockLedgerRepository(ctrl *gomock.Controller) *MockLedgerRepository {
	mock := &MockLedgerRepository{ctrl: ctrl}
	mock.recorder = &MockLedgerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerRepository) EXPECT() *MockLedgerRepositoryMockRecorder {
	return m.recorder
}

// GetTransactionsByAccountID mocks base method.
func (m *MockLedgerRepository) GetTransactionsByAccountID(ctx context.Context, accountID uuid.UUID, limit, offset int64) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountID", ctx, accountID, limit, offset)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByAccountID indicates an expected call of GetTransactionsByAccountID.
func (mr *MockLedgerRepositoryMockRecorder) GetTransactionsByAccountID(ctx, accountID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountID", reflect.TypeOf((*MockLedgerRepository)(nil).GetTransactionsByAccountID), ctx, accountID, limit, offset)
}

// InsertTransaction mocks base method.
func (m *MockLedgerRepository) InsertTransaction(ctx context.Context, txn *model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockLedgerRepositoryMockRecorder) InsertTransaction(ctx, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockLedgerRepository)(nil).InsertTransaction), ctx, txn)
}
